{"version":3,"sources":["components/ContactForm.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","userName","email","message","handleSubmit","event","postData","a","url","data","fetch","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","response","json","console","log","error","handleChange","input","target","name","value","setState","classes","this","props","className","container","CssBaseline","Typography","variant","align","component","gutterBottom","toUpperCase","Grid","direction","justify","alignItems","item","id","contactForm","onSubmit","TextField","fullWidth","required","label","inputField","onChange","margin","multiline","rowsMax","spacing","style","marginTop","Button","formButton","type","color","Component","withStyles","width","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kXAkBaA,EAAb,2MACIC,MAAQ,CACJC,SAAU,GACVC,MAAO,GACPC,QAAS,IAJjB,EAQIC,aARJ,uCAQmB,WAAMC,GAAN,cAYIC,EAZJ,WAAAC,EAAA,iGAAAA,EAAA,MAYX,4CAAAA,EAAA,6DAAwBC,EAAxB,+BAA8B,GAAIC,EAAlC,+BAAyC,GAAzC,SAE+BC,MAAMF,EAAK,CAClCG,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,QAAS,CACT,eAAgB,oBAGhBC,SAAU,SACVC,SAAU,cACVC,KAAMC,KAAKC,UAAUX,KAb7B,cAEcY,EAFd,gBAeaA,EAASC,OAftB,oFAZW,uBAYIhB,EAZJ,6CAG0B,EAAKN,MAAlCC,EAHG,EAGHA,SAAUC,EAHP,EAGOA,MAAOC,EAHd,EAGcA,QAHd,kBAMYG,EAAS,qEAAsE,CAAEL,WAAUC,QAAOC,YAN9G,OAMDM,EANC,OAOPc,QAAQC,IAAIL,KAAKC,UAAUX,IAPpB,kDASPc,QAAQE,MAAR,MATO,0DARnB,wDAwCIC,aAAe,SAAAC,GAAK,OAAI,SAAAtB,GAAU,IAAD,EACLA,EAAMuB,OAAtBC,EADqB,EACrBA,KAAMC,EADe,EACfA,MAEd,EAAKC,SAAL,eAAiBF,EAAOC,MA3ChC,wEA+Cc,IACEE,EAAYC,KAAKC,MAAjBF,QADH,EAEgCC,KAAKjC,MAFrC,EAEGC,SAFH,EAEaC,MAFb,EAEoBC,QACzB,OACI,yBAAKgC,UAAWH,EAAQI,WACxB,kBAACC,EAAA,EAAD,MACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,SAASC,UAAU,KAAKC,cAAY,GAC9D,eAAeC,eAEpB,kBAACC,EAAA,EAAD,CAAMR,WAAS,EAACS,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC3D,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACN,0BACAC,GAAG,eACHd,UAAWH,EAAQkB,YACnBC,SAAUlB,KAAK7B,cAEX,kBAACwC,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACI,EAAA,EAAD,CACAC,WAAS,EACTC,UAAQ,EACRL,GAAG,OACHM,MAAM,OACN1B,KAAK,WACLM,UAAWH,EAAQwB,WACnBC,SAAUxB,KAAKP,aAAa,YAC5BgC,OAAO,YAGX,kBAACd,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACI,EAAA,EAAD,CACAC,WAAS,EACTC,UAAQ,EACRL,GAAG,QACHM,MAAM,QACN1B,KAAK,QACLM,UAAWH,EAAQwB,WACnBC,SAAUxB,KAAKP,aAAa,SAC5BgC,OAAO,YAGX,kBAACd,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACI,EAAA,EAAD,CACAC,WAAS,EACTC,UAAQ,EACRL,GAAG,UACHM,MAAM,UACN1B,KAAK,UACLM,UAAWH,EAAQwB,WACnBC,SAAUxB,KAAKP,aAAa,WAC5BgC,OAAO,SACPC,WAAS,EACTC,QAAQ,OAGZ,kBAAChB,EAAA,EAAD,CAAMR,WAAS,EAACS,UAAU,MAAMgB,QAAS,EAAGC,MAAO,CAAEC,UAAW,KAChE,kBAACnB,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACgB,EAAA,EAAD,CACA7B,UAAWH,EAAQiC,WACnBC,KAAK,QACL3B,QAAQ,YACR4B,MAAM,WAJN,UAUJ,kBAACvB,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACgB,EAAA,EAAD,CACA7B,UAAWH,EAAQiC,WACnBC,KAAK,SACL3B,QAAQ,YACR4B,MAAM,WAJN,oBAlHhC,GAAiCC,aA0IlBC,cAjJA,CACXnB,YAAa,CACTa,UAAW,GACXO,MAAO,SA8IAD,CAAmBtE,G,MC9InBwE,MARf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,QCGcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e291731b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\n\r\nconst styles = {\r\n    contactForm: {\r\n        marginTop: 50,\r\n        width: '60vh'\r\n        }\r\n  };\r\n\r\nexport class ContactForm extends Component {\r\n    state = {\r\n        userName: '',\r\n        email: '',\r\n        message: ''\r\n    }\r\n    \r\n    // Handle submit button\r\n    handleSubmit = async event => {\r\n        \r\n\r\n        const { userName, email, message } = this.state;\r\n        \r\n        try {\r\n            const data = await postData('https://1u5leuz6gg.execute-api.us-west-2.amazonaws.com/prod/submit', { userName, email, message });\r\n            console.log(JSON.stringify(data)); // JSON-string from `response.json()` call\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n\r\n        async function postData(url = '', data = {}) {\r\n            // Default options are marked with *\r\n                const response = await fetch(url, {\r\n                method: 'POST', // *GET, POST, PUT, DELETE, etc.\r\n                mode: 'cors', // no-cors, *cors, same-origin\r\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                credentials: 'same-origin', // include, *same-origin, omit\r\n                headers: {\r\n                'Content-Type': 'application/json'\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                redirect: 'follow', // manual, *follow, error\r\n                referrer: 'no-referrer', // no-referrer, *client\r\n                body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n            });\r\n        return await response.json(); // parses JSON response into native JavaScript objects\r\n        }\r\n    }\r\n\r\n    // Handle fields change\r\n    handleChange = input => event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({ [name]: value });\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { userName, email, message } = this.state;\r\n        return (\r\n            <div className={classes.container}>\r\n            <CssBaseline />\r\n                <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n                    {'Contact Form'.toUpperCase()}\r\n                </Typography>\r\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n                    <Grid item>\r\n                        <form\r\n                        id=\"contact-form\"\r\n                        className={classes.contactForm}\r\n                        onSubmit={this.handleSubmit}\r\n                        >\r\n                            <Grid item>\r\n                                <TextField\r\n                                fullWidth\r\n                                required\r\n                                id=\"name\"\r\n                                label=\"Name\"\r\n                                name=\"userName\"\r\n                                className={classes.inputField}\r\n                                onChange={this.handleChange(\"userName\")}\r\n                                margin=\"normal\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField\r\n                                fullWidth\r\n                                required\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                className={classes.inputField}\r\n                                onChange={this.handleChange(\"email\")}\r\n                                margin=\"normal\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField\r\n                                fullWidth\r\n                                required\r\n                                id=\"message\"\r\n                                label=\"Message\"\r\n                                name=\"message\"\r\n                                className={classes.inputField}\r\n                                onChange={this.handleChange(\"message\")}\r\n                                margin=\"normal\"\r\n                                multiline\r\n                                rowsMax=\"4\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid container direction=\"row\" spacing={2} style={{ marginTop: 20 }}>\r\n                            <Grid item >\r\n                                <Button\r\n                                className={classes.formButton}\r\n                                type=\"reset\"\r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                //disabled={submitting || pristine}\r\n                                >\r\n                                RESET\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item >  \r\n                                <Button\r\n                                className={classes.formButton}\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                >\r\n                                Submit\r\n                                </Button>\r\n                            </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </div> \r\n                      \r\n        );\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\n  \r\nexport default withStyles(styles)(ContactForm);\r\n","import React from 'react';\r\n\r\nimport ContactForm from './components/ContactForm';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ContactForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}