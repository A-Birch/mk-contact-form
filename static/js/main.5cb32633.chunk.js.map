{"version":3,"sources":["components/ContactForm.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactForm","state","userName","email","message","handleSubmit","event","console","log","handleChange","input","target","name","value","setState","classes","this","props","className","container","CssBaseline","Typography","variant","align","component","gutterBottom","toUpperCase","Grid","direction","justify","alignItems","item","id","contactForm","onSubmit","TextField","fullWidth","required","label","inputField","onChange","margin","multiline","rowsMax","spacing","style","marginTop","xs","md","lg","Button","formButton","type","color","Component","withStyles","width","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAmBaA,EAAb,2MACIC,MAAQ,CACJC,SAAU,GACVC,MAAO,GACPC,QAAS,IAJjB,EAQIC,aAAe,SAAAC,GAAS,MAGiB,EAAKL,MAHtB,EAGZC,SAHY,EAGFC,MAHE,EAGKC,QACzBG,QAAQC,IAAI,EAAKP,QAZzB,EAgBIQ,aAAe,SAAAC,GAAK,OAAI,SAAAJ,GAAU,IAAD,EACLA,EAAMK,OAAtBC,EADqB,EACrBA,KAAMC,EADe,EACfA,MAEd,EAAKC,SAAL,eAAiBF,EAAOC,IACxBN,QAAQC,IAAI,EAAKP,SApBzB,wEAuBc,IACEc,EAAYC,KAAKC,MAAjBF,QADH,EAEgCC,KAAKf,MAFrC,EAEGC,SAFH,EAEaC,MAFb,EAEoBC,QACzB,OACI,yBAAKc,UAAWH,EAAQI,WACxB,kBAACC,EAAA,EAAD,MACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,SAASC,UAAU,KAAKC,cAAY,GAC9D,eAAeC,eAEpB,kBAACC,EAAA,EAAD,CAAMR,WAAS,EAACS,UAAU,SAASC,QAAQ,SAASC,WAAW,UAC3D,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACN,0BACAC,GAAG,eACHd,UAAWH,EAAQkB,YACnBC,SAAUlB,KAAKX,cAEX,kBAACsB,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACI,EAAA,EAAD,CACAC,WAAS,EACTC,UAAQ,EACRL,GAAG,OACHM,MAAM,OACN1B,KAAK,WACLM,UAAWH,EAAQwB,WACnBC,SAAUxB,KAAKP,aAAa,YAC5BgC,OAAO,YAGX,kBAACd,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACI,EAAA,EAAD,CACAC,WAAS,EACTC,UAAQ,EACRL,GAAG,QACHM,MAAM,QACN1B,KAAK,QACLM,UAAWH,EAAQwB,WACnBC,SAAUxB,KAAKP,aAAa,SAC5BgC,OAAO,YAGX,kBAACd,EAAA,EAAD,CAAMI,MAAI,GACN,kBAACI,EAAA,EAAD,CACAC,WAAS,EACTC,UAAQ,EACRL,GAAG,UACHM,MAAM,UACN1B,KAAK,UACLM,UAAWH,EAAQwB,WACnBC,SAAUxB,KAAKP,aAAa,WAC5BgC,OAAO,SACPC,WAAS,EACTC,QAAQ,OAGZ,kBAAChB,EAAA,EAAD,CAAMR,WAAS,EAACS,UAAU,MAAME,WAAW,SAASc,QAAS,EAAGC,MAAO,CAAEC,UAAW,KACpF,kBAACnB,EAAA,EAAD,CAAMI,MAAI,EAACgB,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACzB,kBAACC,EAAA,EAAD,CACAhC,UAAWH,EAAQoC,WACnBC,KAAK,QACL9B,QAAQ,YACR+B,MAAM,WAJN,UAUJ,kBAAC1B,EAAA,EAAD,CAAMI,MAAI,EAACgB,GAAI,EAAGC,GAAI,EAAGC,GAAI,GACzB,kBAACC,EAAA,EAAD,CACAhC,UAAWH,EAAQoC,WACnBC,KAAK,SACL9B,QAAQ,YACR+B,MAAM,WAJN,oBA1FhC,GAAiCC,aAkHlBC,cAzHA,CACXtB,YAAa,CACTa,UAAW,GACXU,MAAO,SAsHAD,CAAmBvD,G,MCvHnByD,MARf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,QCGcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5cb32633.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n//import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\n//import AppBar from 'material-ui/AppBar';\r\n\r\nconst styles = {\r\n    contactForm: {\r\n        marginTop: 50,\r\n        width: '60vh'\r\n    }\r\n  };\r\n\r\nexport class ContactForm extends Component {\r\n    state = {\r\n        userName: '',\r\n        email: '',\r\n        message: ''\r\n    }\r\n    \r\n    // Handle submit button\r\n    handleSubmit = event => {\r\n        //event.preventDefault();\r\n\r\n        const { userName, email, message } = this.state;\r\n        console.log(this.state);\r\n    }\r\n\r\n    // Handle fields change\r\n    handleChange = input => event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({ [name]: value });\r\n        console.log(this.state);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { userName, email, message } = this.state;\r\n        return (\r\n            <div className={classes.container}>\r\n            <CssBaseline />\r\n                <Typography variant=\"h4\" align=\"center\" component=\"h1\" gutterBottom>\r\n                    {'Contact Form'.toUpperCase()}\r\n                </Typography>\r\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n                    <Grid item>\r\n                        <form\r\n                        id=\"contact-form\"\r\n                        className={classes.contactForm}\r\n                        onSubmit={this.handleSubmit}\r\n                        >\r\n                            <Grid item>\r\n                                <TextField\r\n                                fullWidth\r\n                                required\r\n                                id=\"name\"\r\n                                label=\"Name\"\r\n                                name=\"userName\"\r\n                                className={classes.inputField}\r\n                                onChange={this.handleChange(\"userName\")}\r\n                                margin=\"normal\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField\r\n                                fullWidth\r\n                                required\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                className={classes.inputField}\r\n                                onChange={this.handleChange(\"email\")}\r\n                                margin=\"normal\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <TextField\r\n                                fullWidth\r\n                                required\r\n                                id=\"message\"\r\n                                label=\"Message\"\r\n                                name=\"message\"\r\n                                className={classes.inputField}\r\n                                onChange={this.handleChange(\"message\")}\r\n                                margin=\"normal\"\r\n                                multiline\r\n                                rowsMax=\"4\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" spacing={1} style={{ marginTop: 20 }}>\r\n                            <Grid item xs={2} md={2} lg={2}>\r\n                                <Button\r\n                                className={classes.formButton}\r\n                                type=\"reset\"\r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                //disabled={submitting || pristine}\r\n                                >\r\n                                RESET\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} lg={2}>  \r\n                                <Button\r\n                                className={classes.formButton}\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                >\r\n                                Submit\r\n                                </Button>\r\n                            </Grid>\r\n                            </Grid>\r\n                        </form>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n            </div> \r\n                      \r\n        );\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\n  \r\nexport default withStyles(styles)(ContactForm);\r\n","import React from 'react';\n\nimport ContactForm from './components/ContactForm';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ContactForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}